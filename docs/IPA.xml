<?xml version="1.0" encoding="utf-8" ?>
<extradoc>
		<class name="IPA">
				<summary>
						Hex class handling color hex for R, G, and B.  Alpha or transparency is not included or used.
				</summary>
				<returns></returns>
				<methods>
						<method name="IsMatch">
								<summary>
										IsMatch(required string ipa):<br/>
										--- IP Address Validation Rationale ---<br/>
										After extensive research and testing, it was determined that a single regular expression (Regex)<br/>
										is inherently insufficient and unreliable for robust IPv6 address validation.<br/>
										<br/>
										Key reasons for this decision include:<br/>
										1.  **Complexity of IPv6 Rules:** IPv6 addresses have intricate rules for format,<br/>
										    especially regarding zero compression (the '::' notation), where it can appear only once<br/>
										    and can represent varying numbers of zero segments.<br/>
										2.  **Ambiguity and Edge Cases:** Even highly complex IPv6 regex patterns, like the<br/>
										    one demonstrated during testing, often rely on numerous OR conditions. This can<br/>
										    unintentionally lead to false positives, allowing malformed addresses (e.g.,<br/>
										    containing non-hexadecimal characters or incorrect segment counts) to be<br/>
										    mistakenly validated as true, particularly towards the end of the string.<br/>
										<br/>
										Therefore, validation is performed using the `IPAddress.TryParse()` API from the<br/>
										.NET framework. This method is specifically designed for IP address parsing and<br/>
										adheres to all relevant RFC standards, providing accurate and reliable validation<br/>
										across all valid IPv4 and IPv6 scenarios, and correctly identifying invalid ones.<br/>
										<br/>
										While a closest-possible IPv6 Regex pattern was identified, its limitations<br/>
										make it unsuitable for production-grade validation.<br/>
										Regex pattern with zoneID (for reference, but NOT used for validation due to issues):<br/>
										@"^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$"<br/>
								</summary>
								<returns>
										True: is valid IPv4 or IPv6<br/>
										False: is invalid IPv4 or IPv6<br/>
								</returns>
						</method>
						<method name="IsIP">
								<summary>
										Determines if a string is a valid IPv4 or IPv6 address.
								</summary>
								<returns>
										4 if it's a valid IPv4 address.<br/>
										6 if it's a valid IPv6 address.<br/>
										0 if it's not a valid IP address (neither IPv4 nor IPv6).<br/>
								</returns>
						</method>
				</methods>
				<properties>
						<property name="Ipv4">
								<summary>
										Unused, but left for developers that would like to use it.
								</summary>
								<returns>
										Valid Regex pattern string for IPv4
								</returns>
						</property>
						<property name="IpV6">
								<summary>
										Unused, but left for developers that would like to use it, but shouldn't be used in production as it's not 100%.
								</summary>
								<returns>
										Invalid Regex pattern string for IPv6
								</returns>
						</property>
				</properties>
		</class>
</extradoc>